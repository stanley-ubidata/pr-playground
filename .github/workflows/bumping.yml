name: Bump version on PR

on:
  pull_request:
    types: [closed]
    branches:
      - "main"

  workflow_dispatch:
    inputs:
      enviroment:
        type: environment
        default: DEV
        required: true
      patch_version:
        type: number
        default: "-"
        required: false
      min_version:
        type: number
        default: "-"
        required: false
      major_version:
        default: "-"
        type: number
        required: false

jobs:
  trigger-check:
    if: ${{ github.event_name == 'pull_request' && (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'version')) || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if version is required based on environment value
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # if version is empty or dash AND envrionement is QA
            if [ "${{ github.event.inputs.enviroment }}" == "QA" ] && [ "${{ github.event.inputs.min_version }}" == "-" ]; then
              echo "Version is required for QA environment"
              exit 1
            fi
          fi
        shell: bash
  update-version:
    permissions:
      contents: write
      pull-requests: write
    needs: trigger-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Print actor
        run: |
          echo ${{ github.actor }}
          echo ${{ github.event.pull_request.head.ref }}
        shell: bash

      - name: print hello if actor is not jarvis
        if: ${{ github.actor == 'jarvis-ubidata' }}
        run: echo "Hello"
        shell: bash

      - name: Get latest tag containing environment name
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --list "*${{ github.event.inputs.enviroment }}*" --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"
        shell: bash

      - name: Update version
        id: update_monorepo_version
        run: |
          ## get the current version
          current_version=$(cat VERSION)

          ## print the current version
          echo "Current version: $current_version"

          # Run the shell script and capture its output
          new_version=$(python bump_version.py $current_version ${{ github.event.inputs.major_version }} ${{ github.event.inputs.min_version }} ${{ github.event.inputs.patch_version }})

          # Print the captured output for verification
          echo "Shell script output: $new_version"

          ## print the new version
          echo "$new_version" > VERSION

        shell: bash

      - name: Set environment variable
        env:
          NEW_VERSION: ${{ steps.update_monorepo_version.outputs.new_version }}
        id: set_env_variable
        shell: bash
        run: |
          # Navigate to the apps directory

          # Assign file content to an environment variable
          export NEW_VERSION=$(cat VERSION)

          # Display the environment variable
          echo "New version from environment variable: $NEW_VERSION"

          # Set the environment variable for the next steps GITHUB
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.STANLEY_TOKEN }}
          reviewers: ${{ github.actor }}
          body: |
            This PR updates the version file to ${{ env.NEW_VERSION }}.
            Version update from PR created by ${{ github.actor }} on ${{ github.event.pull_request.head.ref }}.

          commit-message: Update version file through script
          title: "Bump version to ${{ env.NEW_VERSION }}"
          delete-branch: true
          labels: version
          branch: version-${{ env.NEW_VERSION}}
          base: main

  automerge:
    needs: update-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - id: automerge
        name: automerge
        uses: "pascalgn/automerge-action@v0.16.4"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: "version"
          MERGE_REQUIRED_APPROVALS: "0"
