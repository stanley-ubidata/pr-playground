name: Deploy to Environment

on:
  pull_request:
    types: [closed]
    branches:
      - "main"

  workflow_dispatch:
    inputs:
      app_name:
        required: false
        type: choice
        description: "App to deploy (STAG/PROD) ONLY"
        default: "monorepo"
        options:
          - "ubidocs_mobile"
          - "ubidocs_web"
          - "ubimatic"
          - "ubifuel"
          - "ubitrails"
      environment:
        type: environment
        default: DEV
        required: true
        description: "Environment to deploy to"
      patch_version:
        type: number
        default: "-"
        required: false
        description: "Patch Version (STAG/PROD) ONLY"
      min_version:
        default: "-"
        type: number
        required: false
        description: "Minor Version (STAG/PROD) ONLY"
      major_version:
        default: "-"
        type: number
        required: false
        description: "Major Version (STAG/PROD) ONLY"

jobs:
  trigger-check:
    name: ðŸš¦ Trigger check
    if: ${{ github.event_name == 'pull_request' && (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'version')) || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check if version is required based on environment value
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then

            # Check for DEV environment
            if [ "${{ github.event.inputs.environment }}" == "DEV" ]; then
              if [ "${{ github.event.inputs.major_version }}" != "-" ] || [ "${{ github.event.inputs.min_version }}" != "-" ] || [ "${{ github.event.inputs.patch_version }}" != "-" ]; then
                echo "Major, minor, and patch versions are not required for DEV environment"
                exit 1
              fi
            fi

            # QA environment should have not have a major, minor, and patch version.
            if [ "${{ github.event.inputs.environment }}" == "QA" ]; then
              if [ "${{ github.event.inputs.major_version }}" != "-" ] || [ "${{ github.event.inputs.min_version }}" != "-" ] || [ "${{ github.event.inputs.patch_version }}" != "-" ]; then
                echo "Major, minor, and patch versions should not be provided for QA environment"
                exit 1
              fi
            fi

            ## if environment is STAG or PROD, app_name should be provided 
            if [ "${{ github.event.inputs.environment }}" == "STAG" ] || [ "${{ github.event.inputs.environment }}" == "PROD" ]; then
              if [ "${{ github.event.inputs.app_name }}" == "monorepo" ]; then
                echo "App name is required for STAG and PROD environments"
                exit 1
              fi
            fi
          fi
        shell: bash

  update-version:
    name: ðŸ“œ Update version
    permissions:
      contents: write
      pull-requests: write
    needs: trigger-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Print actor
        run: |
          echo ${{ github.actor }}
          echo ${{ github.event.pull_request.head.ref }}
        shell: bash

      - name: print hello if actor is not jarvis
        if: ${{ github.actor == 'jarvis-ubidata' }}
        run: echo "Hello"
        shell: bash

      - name: Update version
        id: update_monorepo_version
        run: |
          ## get the current version
          current_version=$(cat VERSION)

          ## print the current version
          echo "Current version: $current_version"

          # Run the shell script and capture its output
          new_version=$(python bump_version.py $current_version ${{ inputs.environment || 'DEV'}} ${{ github.event.inputs.major_version }} ${{ github.event.inputs.min_version }} ${{ github.event.inputs.patch_version }})

          # Print the captured output for verification
          echo "Shell script output: $new_version"

          ## print the new version
          echo "$new_version" > VERSION

        shell: bash

      - name: Set environment variable
        env:
          NEW_VERSION: ${{ steps.update_monorepo_version.outputs.new_version }}
        id: set_env_variable
        shell: bash
        run: |
          # Navigate to the apps directory

          # Assign file content to an environment variable
          export NEW_VERSION=$(cat VERSION)

          # Display the environment variable
          echo "New version from environment variable: $NEW_VERSION"

          # Set the environment variable for the next steps GITHUB
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Print new version
        run: |
          echo "New version: $NEW_VERSION"
        shell: bash

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.STANLEY_TOKEN }}
          reviewers: ${{ github.actor }}
          body: |
            This PR updates the version file to ${{ env.NEW_VERSION }}.
            Version update from PR created by ${{ github.actor }} on ${{ github.event.pull_request.head.ref }}.

          commit-message: Update version file through script
          title: "Bump version to ${{ env.NEW_VERSION }}"
          delete-branch: true
          labels: version, env-${{ inputs.environment || 'DEV' }}, app-${{ inputs.app_name || 'monorepo' }}
          branch: version-${{ env.NEW_VERSION}}
          base: main
