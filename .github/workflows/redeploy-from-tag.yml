name: Redeploy from Existing Tag

on:
  workflow_dispatch:
    inputs:
      new_app_name:
        required: true
        type: choice
        description: "App to deploy to"
        options:
          - "all_web"
          - "ubidocs_mobile"
          - "ubidocs_web"
          - "ubidocs_trails_app"
          - "fuel_consolidation"
          - "ubimatic"
          - "delhaize_cdg"
      new_environment:
        required: true
        type: choice
        description: "Environment to deploy to"
        options:
          - "DEV"
          - "QA"
          - "STAGING"
          - "PROD"

jobs:
  validate-and-create-tag:
    name: üîÑ Create New Deployment Tag
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to check tags

      - name: Parse current tag and create new tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.STANLEY_TOKEN }}
          script: |
            // Extract current tag components
            const currentTag = process.env.GITHUB_REF.replace('refs/tags/', '');
            console.log(`Processing current tag: ${currentTag}`);

            // Remove 'v' prefix
            const tagWithoutV = currentTag.startsWith('v') ? currentTag.substring(1) : currentTag;

            // Split by '-' to get parts
            const parts = tagWithoutV.split('-');
            if (parts.length !== 3) {
              core.setFailed(`Invalid tag format: ${currentTag}. Expected format: v<version>-<app>-<environment>`);
              return;
            }

            const versionWithBuild = parts[0];
            // Extract version and build number if present
            let version = versionWithBuild;
            let buildNumber = "";
            if (versionWithBuild.includes('+')) {
              [version, buildNumber] = versionWithBuild.split('+');
            }

            // Create new tag with requested app and environment
            const newApp = '${{ github.event.inputs.new_app_name }}';
            const newEnv = '${{ github.event.inputs.new_environment }}';

            // Format new tag
            let newTag;
            if (buildNumber) {
              newTag = `v${version}+${buildNumber}-${newApp}-${newEnv}`;
            } else {
              newTag = `v${version}-${newApp}-${newEnv}`;
            }

            console.log(`Creating new tag: ${newTag}`);

            // Get the commit SHA from the current tag
            try {
              const { data: tagData } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${currentTag}`
              });
              const commitSha = tagData.object.sha;

              // Create or update tag pointing to the same commit
              try {
                // Try to create the tag
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${newTag}`,
                  sha: commitSha
                });
                console.log(`Successfully created tag: ${newTag} pointing to same commit as ${currentTag}`);
              } catch (error) {
                if (error.status === 422) { 
                  console.log(`Tag ${newTag} already exists. Updating it.`);
                  // If the tag already exists, update it
                  await github.rest.git.updateRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${newTag}`,
                    sha: commitSha,
                    force: true
                  });
                  console.log(`Successfully updated tag ${newTag}`);
                } else {
                  // If it's any other error, throw it
                  throw error;
                }
              }
            } catch (error) {
              core.setFailed(`Failed to create or update tag: ${error.message}`);
            }

      - name: Display next steps
        run: |
          echo "‚úÖ New tag created or updated successfully."
          echo "üëÄ The 'Deploy from Tag' workflow should start automatically."
          echo "‚è±Ô∏è Please check the 'Actions' tab for deployment status."
