name: Redeploy from Existing Tag

on:
  workflow_dispatch:
    inputs:
      new_app_name:
        required: true
        type: choice
        description: "App to deploy to"
        options:
          - "ubidocs_mobile"
          - "ubidocs_web"
          - "ubidocs_trails_app"
          - "fuel_consolidation"
          - "ubimatic"
          - "delhaize_cdg"
      new_environment:
        required: true
        type: choice
        description: "Environment to deploy to"
        options:
          - "dev"
          - "qa"
          - "staging"
          - "prod"

jobs:
  validate-and-create-tag:
    name: üîÑ Create New Deployment Tag
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to check tags

      - name: Get current tag
        id: get-current-tag
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0)
          echo "CURRENT_TAG=${CURRENT_TAG}" >> $GITHUB_ENV
          echo "Using current tag: ${CURRENT_TAG}"

      - name: Parse current tag and create new tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.STANLEY_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const currentTag = process.env.CURRENT_TAG;

            // Extract version number from current tag (assuming format vX.Y.Z-app-env)
            const versionMatch = currentTag.match(/^v(\d+\.\d+\.\d+)/);
            if (!versionMatch) {
              throw new Error(`Invalid current tag format: ${currentTag}`);
            }
            const version = versionMatch[1];

            const newApp = '${{ github.event.inputs.new_app_name }}';
            const newEnv = '${{ github.event.inputs.new_environment }}';
            const buildNumber = process.env.GITHUB_RUN_NUMBER;

            const newTag = `v${version}-${newApp}-${newEnv}-build.${buildNumber}`;
            const sha = context.sha;

            console.log(`New tag to create: ${newTag}`);

            try {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${newTag}`,
                sha
              });
              console.log(`Successfully created tag ${newTag}`);
            } catch (error) {
              if (error.status === 422) {
                console.log(`Tag ${newTag} already exists. Updating it.`);
                await github.rest.git.updateRef({
                  owner,
                  repo,
                  ref: `tags/${newTag}`,
                  sha,
                  force: true
                });
                console.log(`Successfully updated tag ${newTag}`);
              } else {
                throw error;
              }
            }

      - name: Display next steps
        run: |
          echo "‚úÖ New tag created or updated successfully."
          echo "üëÄ The 'Deploy from Tag' workflow should start automatically."
          echo "‚è±Ô∏è Please check the 'Actions' tab for deployment status."
