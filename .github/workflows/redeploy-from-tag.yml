name: Redeploy from Existing Tag

on:
  workflow_dispatch:
    inputs:
      new_app_name:
        required: true
        type: choice
        description: "App to deploy to"
        options:
          - "ubidocs_mobile"
          - "ubidocs_web"
          - "ubidocs_trails_app"
          - "fuel_consolidation"
          - "ubimatic"
          - "delhaize_cdg"
      new_environment:
        required: true
        type: choice
        description: "Environment to deploy to"
        options:
          - "dev"
          - "qa"
          - "staging"
          - "prod"

jobs:
  validate-and-create-tag:
    name: üîÑ Create New Deployment Tag
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to check tags

      - name: Get current tag
        id: get-current-tag
        run: |
          CURRENT_TAG=$(git describe --tags --abbrev=0)
          echo "CURRENT_TAG=${CURRENT_TAG}" >> $GITHUB_ENV
          echo "Using current tag: ${CURRENT_TAG}"

      - name: Parse current tag and create new tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.STANLEY_TOKEN }}
          script: |
            // Extract current tag components
            const currentTag = process.env.CURRENT_TAG;
            console.log(`Processing current tag: ${currentTag}`);

            // Remove 'v' prefix
            const tagWithoutV = currentTag.startsWith('v') ? currentTag.substring(1) : currentTag;

            // Split by '-' to get parts
            const parts = tagWithoutV.split('-');
            if (parts.length !== 3) {
              core.setFailed(`Invalid tag format: ${currentTag}. Expected format: v<version>-<app>-<environment>`);
              return;
            }

            const versionWithBuild = parts[0];
            // Extract version and build number if present
            let version = versionWithBuild;
            let buildNumber = "";
            if (versionWithBuild.includes('+')) {
              [version, buildNumber] = versionWithBuild.split('+');
            }

            // Create new tag with requested app and environment
            const newApp = '${{ github.event.inputs.new_app_name }}';
            const newEnv = '${{ github.event.inputs.new_environment }}';

            // Format new tag
            let newTag;
            if (buildNumber) {
              newTag = `v${version}+${buildNumber}-${newApp}-${newEnv}`;
            } else {
              newTag = `v${version}-${newApp}-${newEnv}`;
            }

            console.log(`Creating new tag: ${newTag}`);

            // Check if tag already exists
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${newTag}`
              });
              console.log(`Tag ${newTag} already exists. Will delete and recreate.`);
              
              // Delete existing tag
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${newTag}`
              });
            } catch (error) {
              // Tag doesn't exist, which is fine
              console.log(`Tag ${newTag} does not exist yet.`);
            }

            // Get the current commit SHA
            const { data: refData } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main'
            });
            const commitSha = refData.object.sha;

            // Create new tag
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${newTag}`,
              sha: commitSha
            });

            console.log(`Successfully created tag: ${newTag}`);

      - name: Display next steps
        run: |
          echo "‚úÖ New tag created or updated successfully."
          echo "üëÄ The 'Deploy from Tag' workflow should start automatically."
          echo "‚è±Ô∏è Please check the 'Actions' tab for deployment status."
