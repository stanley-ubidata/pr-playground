name: Tag and Deploy on PR Merge

on:
  pull_request:
    types: [closed, ready_for_review, converted_to_draft]
    branches:
      - main

jobs:
  setup:
    # if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'version')
    runs-on: ubuntu-latest
    steps:
      - name: Extract Deployment Info from PR Labels
        id: extract-info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            console.log('All PR Labels:');
            pr.labels.forEach(label => {
              console.log(`- ${label.name}`);
            });

            const envLabel = pr.labels.find(label => label.name.startsWith('env'));
            if (envLabel) {
              console.log('\nFound environment label:', envLabel.name);
              // Extract environment value (remove 'env-' prefix)
              const envValue = envLabel.name.replace(/^env-/, '');
              // Set output variable for use in next steps
              core.setOutput('environment', envValue);
              // Set environment variable for current job
              core.exportVariable('DEPLOY_ENV', envValue);
            } else {
              console.log('\nNo environment label found');
              core.setOutput('environment', 'none');
              core.exportVariable('DEPLOY_ENV', 'none');
            }

            const appLabel = pr.labels.find(label => label.name.startsWith('app'));
            if (appLabel) {
              console.log('\nFound app label:', appLabel.name);
              // Extract app value (remove 'app-' prefix)
              const appValue = appLabel.name.replace(/^app-/, '');
              // Set output variable for use in next steps
              core.setOutput('app', appValue);
              // Set environment variable for current job
              core.exportVariable('DEPLOY_APP', appValue);
            } else {
              console.log('\nNo app label found');
              core.setOutput('app', 'none');
              core.exportVariable('DEPLOY_APP', 'none');
            }

  create_tag:
    needs: setup
    permissions: write-all
    name: üè∑Ô∏è Create/Update tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get and store the new version
        id: set_env_variable
        shell: bash
        run: |
          # Navigate to the apps directory

          # Assign file content to an environment variable
          export NEW_VERSION=$(cat VERSION)

          # Display the environment variable
          echo "New version from environment variable: $NEW_VERSION"

          # Set the environment variable for the next steps GITHUB
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: üè∑Ô∏è Create/update tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.STANLEY_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const newTag = "v${{ env.NEW_VERSION }}-${DEPLOY_ENV}-${DEPLOY_APP}";
            const sha = context.sha;

            try {
              await github.rest.git.createRef({
                owner,
                repo,
                ref: `refs/tags/${newTag}`,
                sha
              });
              console.log(`Successfully created tag ${newTag}`);
            } catch (error) {
              if (error.status === 422) { 
                console.log(`Tag ${newTag} already exists. Updating it.`);
                // If the tag already exists, update it
                await github.rest.git.updateRef({
                  owner,
                  repo,
                  ref: `tags/${newTag}`,
                  sha,
                  force: true
                });
                console.log(`Successfully updated tag ${newTag}`);
              } else {
                // If it's any other error, well.. good luck with that. throw it.
                throw error;
              }
            }
      # Rest of your deployment steps...
      - name: Deploy Application
        run: |
          echo "Deploying $DEPLOY_APP version $DEPLOY_VERSION to $DEPLOY_ENV"
          # Your deployment logic here
